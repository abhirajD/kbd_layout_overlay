name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for temporary files
        run: |
          if find . -name "*.tmp" -o -name "*~" -o -name "*.bak" -o -name ".DS_Store" | grep -q .; then
            echo "Found temporary files:"
            find . -name "*.tmp" -o -name "*~" -o -name "*.bak" -o -name ".DS_Store"
            exit 1
          else
            echo "No temporary files found"
          fi

      - name: Validate CMakeLists.txt
        run: |
          if grep -q "add_executable.*MACOSX_BUNDLE" CMakeLists.txt; then
            echo "CMakeLists.txt contains macOS bundle configuration"
          else
            echo "CMakeLists.txt missing macOS bundle configuration"
            exit 1
          fi

  # Build and Test
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: quality
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install cmake

      - name: Configure (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A x64

      - name: Configure (macOS)
        if: matrix.os == 'macos-latest'
        run: cmake -S . -B build -DENABLE_CODESIGN=OFF

      - name: Build
        run: cmake --build build --config Release

      - name: Run all tests (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          ./build/test_mvp
          ./build/test_overlay_copy
          ./build/test_overlay_scale
          echo "All tests passed on macOS"

      - name: Run all tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          build\\Release\\test_mvp.exe
          build\\Release\\test_overlay_copy.exe
          build\\Release\\test_overlay_scale.exe
          echo "All tests passed on Windows"

      - name: Verify abstraction layers (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          if [ -f "shared/platform.h" ] && [ -f "shared/event_system.h" ] && [ -f "shared/file_system.h" ] && [ -f "shared/graphics.h" ] && [ -f "shared/threading.h" ] && [ -f "shared/system_info.h" ] && [ -f "shared/timer.h" ]; then
            echo "All 7 abstraction layers present"
          else
            echo "Missing abstraction layers"
            exit 1
          fi

      - name: Verify abstraction layers (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if exist "shared\platform.h" if exist "shared\event_system.h" if exist "shared\file_system.h" if exist "shared\graphics.h" if exist "shared\threading.h" if exist "shared\system_info.h" if exist "shared\timer.h" (
            echo "All 7 abstraction layers present"
          ) else (
            echo "Missing abstraction layers"
            exit 1
          )

      - name: Upload Windows executable
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: kbd_layout_overlay-windows
          path: build/Release/kbd_layout_overlay.exe

      - name: Upload macOS app
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: kbd_layout_overlay-macos
          path: build/KbdLayoutOverlay.app

  # Architecture Validation
  architecture:
    name: Architecture Validation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate shared code percentage
        run: |
          total_files=$(find . -name "*.c" -o -name "*.h" -o -name "*.m" | grep -v build | grep -v new_klo | wc -l)
          shared_files=$(find shared -name "*.c" -o -name "*.h" | wc -l)
          shared_percentage=$(( shared_files * 100 / total_files ))

          echo "Total source files: $total_files"
          echo "Shared files: $shared_files"
          echo "Shared percentage: ${shared_percentage}%"

          if [ $shared_percentage -ge 90 ]; then
            echo "✅ Excellent shared code percentage: ${shared_percentage}%"
          elif [ $shared_percentage -ge 80 ]; then
            echo "✅ Good shared code percentage: ${shared_percentage}%"
          else
            echo "❌ Low shared code percentage: ${shared_percentage}%"
            exit 1
          fi

      - name: Validate abstraction layers
        run: |
          layers=("platform.h" "event_system.h" "file_system.h" "graphics.h" "threading.h" "system_info.h" "timer.h")
          for layer in "${layers[@]}"; do
            if [ -f "shared/$layer" ]; then
              echo "✅ Found abstraction layer: $layer"
            else
              echo "❌ Missing abstraction layer: $layer"
              exit 1
            fi
          done
          echo "✅ All 7 abstraction layers present"

      - name: Validate cross-platform compatibility
        run: |
          # Check for platform-specific includes
          if grep -r "#ifdef _WIN32" shared/ | grep -q .; then
            echo "✅ Found Windows platform detection in shared code"
          fi
          if grep -r "#ifdef __APPLE__" shared/ | grep -q .; then
            echo "✅ Found macOS platform detection in shared code"
          fi
          echo "✅ Cross-platform compatibility validated"
